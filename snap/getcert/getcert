#!/bin/bash
#set -x

# If no arguments, print usage statement & exit from function
if [ "$#" -lt "2" ] || [ "$#" -gt "3" ] ; then
	echo
	echo "Usage: getcert <emailaddress> <fqdn> (production) "
	echo
	echo "Runs runs certbot to obtain an SSL certificate for <fqdn>."
	echo "The email address is used by letsencrypt to notify you of certificate issues."
	echo
	echo "<emailaddress> - the email address for letsencrypt to send notifications to"
	echo "<fqdn> - the fqdn to request a certificate for."
	echo "production - The production parameter should be passed as true or false with the default being true."
	echo "  If set to true a 'product' certificate is requested"
	echo "  If set to false a 'staging/test' certificate is requested"
	echo "  A staging certificate is useful when doing install testing to avoid hitting "
	echo "  the Lets Encrypt production certificate requests limit (around five)."
	exit 1 
fi


EMAIL=$1
FQDN=$2
CERTIFICATE_TYPE=$3

# if no third argument then we want a production certificate
if [ "$3" == "" ] || [ "$3" == "true" ] ; then
	CERTIFICATE_TYPE=
	echo "Production certificate will be requested."
else
	CERTIFICATE_TYPE=--staging
	echo "Staging (test) certificate will be requested."
fi

# clearing the keys will stop the renewal process running whilst we get a cert.
# This is needed incase we get run multiple times
snap set ${SNAP_NAME} keystorepwd=
snap set ${SNAP_NAME} fqdn=
snap set ${SNAP_NAME} email=
snap set ${SNAP_NAME} certificatetype=${CERTIFICATE_TYPE}

# generate random password for keystore
KEYSTORE_PWD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
KEYSTORE_DIR=${SNAP_USER_DATA}/keystore
KEYSTORE_PATH=${KEYSTORE_DIR}/${FQDN}.p12 

# Just in case this is a re-run
# check if the certificate already exists and if so lets delete it.
# if we don't delete the cert dir certbot will use a different name so our later steps won't find the certs.
if [ -e "${SNAP_USER_DATA}/letsencrypt/config/live/${FQDN}" ]; then
	rm -rf "${SNAP_USER_DATA}/letsencrypt/config/live/${FQDN}"
	certbot --config-dir ${SNAP_USER_DATA}/letsencrypt/config delete --cert-name ${FQDN}
fi

# Need to take control of port 80 for cert validation
echo Stopping Tomcat
snap stop ${SNAP_NAME}.tomcat

echo fetching SSL certificate, this will take 30+seconds
echo Please ignore the following warning: 'Non-standard path(s)....'
# run cert bot to obtain certificates
certbot certonly ${CERTIFICATE_TYPE} \
         --quiet \
	 --standalone \
	 --noninteractive \
	 --domain ${FQDN} \
	 --agree-tos \
	 --email ${EMAIL} \
	 --config-dir ${SNAP_USER_DATA}/letsencrypt/config \
	 --work-dir ${SNAP_USER_DATA}/letsencrypt/work \
	 --logs-dir ${SNAP_USER_DATA}/letsencrypt/logs \
	 --cert-path ${SNAP_USER_DATA}/letsencrypt/config/live/${fQDN} \
	 --key-path ${SNAP_USER_DATA}/letsencrypt/config/live/${fQDN} \
	 --fullchain-path ${SNAP_USER_DATA}/letsencrypt/config/live/${fQDN} 


mkdir -p ${KEYSTORE_DIR}

# Export the certbot keys to PKCS12 format which tomcat can use
openssl pkcs12 -export \
  -in ${SNAP_USER_DATA}/letsencrypt/config/live/${FQDN}/fullchain.pem \
  -inkey ${SNAP_USER_DATA}/letsencrypt/config/live/${FQDN}/privkey.pem \
  -out ${KEYSTORE_PATH} \
 -password pass:${KEYSTORE_PWD}

# delete the key store so we can recreate it
rm -f "${KEYSTORE_DIR}/*.p12/"

# create a new server.xml for tomcat that is configed for SSL
# using our new keys

SERVERXML="${SNAP_DATA}/conf/server.xml"

# overwrite the default tomcat config file with our SSL enabled one along with the keystore password
sed  -e 's,%FQDN%,'${FQDN}',g' \
	-e 's,%KEYSTORE_PWD%,'${KEYSTORE_PWD}',g' \
	-e 's,%KEYSTORE_PATH%,'${KEYSTORE_PATH}',g' \
	< ${SNAP}/tomcat-with-ssl.xml \
	> "${SERVERXML}"

# The certbot renewal process needs these.
snap set ${SNAP_NAME} keystorepwd=${KEYSTORE_PWD}
snap set ${SNAP_NAME} fqdn=${FQDN}
snap set ${SNAP_NAME} email=${EMAIL}

# restart tomcat with the new server.xml and keys installed
echo Starting Tomcat
snap restart ${SNAP_NAME}.tomcat
