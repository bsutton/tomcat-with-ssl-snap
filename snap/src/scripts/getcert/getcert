#!/bin/dash
set -x
SERVERXML=/conf/server.xml

#temp hacks
SNAPNAME=pi-gation
SERVERXML=conf/server.xml
#end hacks	

# If no arguments, print usage statement & exit from function
if [ "$#" -ne "2" ]; then
	echo
	echo "Usage: getcert <emailaddress> <fqdn> "
	echo
	echo "Runs runs certbot to obtain an SSL certificate for <fqdn>."
	echo  The email address is used by letsencrypt to notify you of certificate issues.
	echo
	echo "<emailaddress> the email address for letsencrypt to send notifications to"
	echo "<fqdn> the fqdn to request a certificate for."
	exit 1 
fi


EMAIL=$1
FQDN=$2

# generate random password for keystore
KEYSTOREPWD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)

#mkdir -p /etc/letsencrypt/live/${FQDN}

# check if the certificate already exists and if so lets delete it.
# if we don't delete the cert dir certbot will use a different name so our later steps won't find the certs.
if [ -e "/etc/letsencrypt/live/${FQDN}" ]; then
	echo rm -rf "/etc/letsencrypt/live/${FQDN}"
	#rm -rf "/etc/letsencrypt/live/${FQDN}"
	#certbot delete --cert-name home.noojee.org
fi


# run cert bot to obtain certificates
 certbot certonly \
	 --standalone \
	 --noninteractive \
	 --domain ${FQDN} \
	 --agree-tos \
	 --email ${EMAIL} \
	 --cert-path /etc/letsencrypt/live/${fQDN} \
	 --key-path  /etc/letsencrypt/live/${fQDN} \
	 --fullchain-path  /etc/letsencrypt/live/${fQDN} \
	 --test-cert \
	 --staging
	 #--dry-run \


mkdir -p /etc/tomcat8/keystore

# create pkcs12 store
openssl pkcs12 -export \
  -in /etc/letsencrypt/live/${FQDN}/fullchain.pem \
  -inkey /etc/letsencrypt/live/${FQDN}/privkey.pem \
  -out /etc/tomcat8/keystore/${FQDN}.p12 \
 -password pass:${KEYSTOREPWD}

# import pkcs12 store int java keystore.
keytool -importkeystore \
 -noprompt \
 -srckeystore /etc/tomcat8/keystore/${FQDN}.p12 \
 -srcstoretype pkcs12 \
 -srcstorepass ${KEYSTOREPWD} \
 -destkeystore /etc/tomcat8/keystore/${FQDN}.keystore \
 -deststoretype jks \
 -deststorepass ${FQDN}

if [ -e "${SERVERXML}.original" ]; then
	echo "server.xml already backedup"
else
	 cp "${SERVERXML}" "${SERVERXML}.original"
fi

# overwrite the default tomcat config file with our SSL enabled one along with the keystore password
sed  -e 's/%FQDN%/'${FQDN}'/g' \
	-e 's/%KEYSTOREPWD%/'${KEYSTOREPWD}'/g' \
	< tomcat-server-with-ssl.xml \
	> "${SERVERXML}"

snap restart ${SNAPNAME}
